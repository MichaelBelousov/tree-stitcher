;; ast-helper-gen for 'thirdparty/tree-sitter-cpp/src/node-types.json'
(define declarator: 'declarator:)
(define size: 'size:)
(define-complex-node abstract_array_declarator
  ((declarator: "")
  (size: "")
  ))
(define parameters: 'parameters:)
(define-complex-node abstract_function_declarator
  ((declarator: "")
  (parameters: (parameter_list))
  ))
(define-simple-node abstract_parenthesized_declarator)
(define-complex-node abstract_pointer_declarator
  ((declarator: "")
  ))
(define-simple-node abstract_reference_declarator)
(define-simple-node access_specifier)
(define name: 'name:)
(define type: 'type:)
(define-complex-node alias_declaration
  ((name: (type_identifier))
  (type: (type_descriptor))
  ))
(define-simple-node argument_list)
(define-complex-node array_declarator
  ((declarator:)
  (size: "")
  ))
(define left: 'left:)
(define operator: 'operator:)
(define right: 'right:)
(define-complex-node assignment_expression
  ((left:)
  (operator:)
  (right:)
  ))
(define prefix: 'prefix:)
(define-complex-node attribute
  ((name: (identifier))
  (prefix: (identifier))
  ))
(define-simple-node attribute_declaration)
(define-simple-node attribute_specifier)
(define-simple-node attributed_declarator)
(define-simple-node attributed_statement)
(define-simple-node base_class_clause)
(define-complex-node binary_expression
  ((left: (preproc_defined))
  (operator:)
  (right: (preproc_defined))
  ))
(define-simple-node bitfield_clause)
(define-simple-node break_statement)
(define arguments: 'arguments:)
(define function: 'function:)
(define-complex-node call_expression
  ((arguments: (argument_list))
  (function: (primitive_type))
  ))
(define value: 'value:)
(define-complex-node case_statement
  ((value: "")
  ))
(define-complex-node cast_expression
  ((type: (type_descriptor))
  (value:)
  ))
(define body: 'body:)
(define-complex-node catch_clause
  ((body: (compound_statement))
  (parameters: (parameter_list))
  ))
(define-simple-node char_literal)
(define-complex-node class_specifier
  ((body: (field_declaration_list))
  (name: "")
  ))
(define argument: 'argument:)
(define-complex-node co_await_expression
  ((argument:)
  (operator:)
  ))
(define-simple-node co_return_statement)
(define-simple-node co_yield_statement)
(define-complex-node comma_expression
  ((left:)
  (right: (comma_expression))
  ))
(define-complex-node compound_literal_expression
  ((type:)
  (value: (initializer_list))
  ))
(define-simple-node compound_requirement)
(define-simple-node compound_statement)
(define-simple-node concatenated_string)
(define-complex-node concept_definition
  ((name: (identifier))
  ))
(define initializer: 'initializer:)
(define-complex-node condition_clause
  ((initializer: (init_statement))
  (value:)
  ))
(define alternative: 'alternative:)
(define condition: 'condition:)
(define consequence: 'consequence:)
(define-complex-node conditional_expression
  ((alternative:)
  (condition:)
  (consequence:)
  ))
(define-complex-node constraint_conjunction
  ((left:)
  (operator:)
  (right:)
  ))
(define-complex-node constraint_disjunction
  ((left:)
  (operator:)
  (right:)
  ))
(define-simple-node continue_statement)
(define default_value: 'default_value:)
(define-complex-node declaration
  ((declarator:)
  (default_value: "")
  (type: "")
  (value: (initializer_list))
  ))
(define-simple-node declaration_list)
(define-simple-node decltype)
(define-simple-node default_method_clause)
(define-simple-node delete_expression)
(define-simple-node delete_method_clause)
(define-simple-node dependent_name)
(define-simple-node dependent_type)
(define-simple-node destructor_name)
(define-complex-node do_statement
  ((body:)
  (condition: (parenthesized_expression))
  ))
(define base: 'base:)
(define-complex-node enum_specifier
  ((base: "")
  (body: (enumerator_list))
  (name: "")
  ))
(define-complex-node enumerator
  ((name: (identifier))
  (value: "")
  ))
(define-simple-node enumerator_list)
(define-simple-node explicit_function_specifier)
(define-simple-node expression_statement)
(define-complex-node field_declaration
  ((declarator: "")
  (default_value: (initializer_list))
  (type:)
  ))
(define-simple-node field_declaration_list)
(define-simple-node field_designator)
(define field: 'field:)
(define-complex-node field_expression
  ((argument:)
  (field:)
  (operator: "")
  ))
(define-simple-node field_initializer)
(define-simple-node field_initializer_list)
(define-complex-node fold_expression
  ((left:)
  (operator:)
  (right:)
  ))
(define-complex-node for_range_loop
  ((body:)
  (declarator:)
  (initializer: (init_statement))
  (right: (initializer_list))
  (type:)
  ))
(define update: 'update:)
(define-complex-node for_statement
  ((body:)
  (condition: (comma_expression))
  (initializer: "")
  (update: (comma_expression))
  ))
(define-simple-node friend_declaration)
(define-complex-node function_declarator
  ((declarator:)
  (parameters: (parameter_list))
  ))
(define-complex-node function_definition
  ((body: "")
  (declarator: (operator_cast))
  (type: "")
  ))
(define label: 'label:)
(define-complex-node goto_statement
  ((label: (statement_identifier))
  ))
(define-complex-node if_statement
  ((alternative: "")
  (condition: (condition_clause))
  (consequence:)
  ))
(define-complex-node init_declarator
  ((declarator:)
  (value:)
  ))
(define-simple-node init_statement)
(define-simple-node initializer_list)
(define designator: 'designator:)
(define-complex-node initializer_pair
  ((designator:)
  (value: (initializer_list))
  ))
(define-complex-node labeled_statement
  ((label: (statement_identifier))
  ))
(define-simple-node lambda_capture_specifier)
(define-simple-node lambda_default_capture)
(define captures: 'captures:)
(define constraint: 'constraint:)
(define template_parameters: 'template_parameters:)
(define-complex-node lambda_expression
  ((body: (compound_statement))
  (captures: (lambda_capture_specifier))
  (constraint: (requires_clause))
  (declarator: (abstract_function_declarator))
  (template_parameters: (template_parameter_list))
  ))
(define-complex-node linkage_specification
  ((body:)
  (value: (string_literal))
  ))
(define-simple-node ms_based_modifier)
(define-simple-node ms_call_modifier)
(define-simple-node ms_declspec_modifier)
(define-simple-node ms_pointer_modifier)
(define-simple-node ms_unaligned_ptr_modifier)
(define-complex-node namespace_alias_definition
  ((name: (namespace_identifier))
  ))
(define-complex-node namespace_definition
  ((body: (declaration_list))
  (name: "")
  ))
(define-simple-node nested_namespace_specifier)
(define length: 'length:)
(define-complex-node new_declarator
  ((length:)
  ))
(define placement: 'placement:)
(define-complex-node new_expression
  ((arguments: "")
  (declarator: (new_declarator))
  (placement: (argument_list))
  (type:)
  ))
(define-simple-node noexcept)
(define-complex-node operator_cast
  ((declarator:)
  (type:)
  ))
(define-simple-node operator_name)
(define-complex-node optional_parameter_declaration
  ((declarator: "")
  (default_value:)
  (type:)
  ))
(define default_type: 'default_type:)
(define-complex-node optional_type_parameter_declaration
  ((default_type:)
  (name: (type_identifier))
  ))
(define-complex-node parameter_declaration
  ((declarator: "")
  (type:)
  ))
(define-simple-node parameter_list)
(define pattern: 'pattern:)
(define-complex-node parameter_pack_expansion
  ((pattern: (type_descriptor))
  ))
(define-simple-node parenthesized_declarator)
(define-simple-node parenthesized_expression)
(define-complex-node placeholder_type_specifier
  ((constraint: "")
  ))
(define-complex-node pointer_declarator
  ((declarator:)
  ))
(define-complex-node pointer_expression
  ((argument:)
  (operator:)
  ))
(define directive: 'directive:)
(define-complex-node preproc_call
  ((argument: (preproc_arg))
  (directive: (preproc_directive))
  ))
(define-complex-node preproc_def
  ((name: (identifier))
  (value: (preproc_arg))
  ))
(define-simple-node preproc_defined)
(define-complex-node preproc_elif
  ((alternative: "")
  (condition:)
  ))
(define-simple-node preproc_else)
(define-complex-node preproc_function_def
  ((name: (identifier))
  (parameters: (preproc_params))
  (value: (preproc_arg))
  ))
(define-complex-node preproc_if
  ((alternative: "")
  (condition:)
  ))
(define-complex-node preproc_ifdef
  ((alternative: "")
  (name: (identifier))
  ))
(define path: 'path:)
(define-complex-node preproc_include
  ((path:)
  ))
(define-simple-node preproc_params)
(define scope: 'scope:)
(define-complex-node qualified_identifier
  ((name:)
  (scope: "")
  ))
(define delimiter: 'delimiter:)
(define-complex-node raw_string_literal
  ((delimiter: (raw_string_delimiter))
  ))
(define-simple-node ref_qualifier)
(define-simple-node reference_declarator)
(define-simple-node requirement_seq)
(define-complex-node requires_clause
  ((constraint:)
  ))
(define requirements: 'requirements:)
(define-complex-node requires_expression
  ((parameters: (parameter_list))
  (requirements: (requirement_seq))
  ))
(define-simple-node return_statement)
(define-simple-node simple_requirement)
(define-complex-node sized_type_specifier
  ((type: "")
  ))
(define-complex-node sizeof_expression
  ((type: (type_descriptor))
  (value: "")
  ))
(define message: 'message:)
(define-complex-node static_assert_declaration
  ((condition:)
  (message: "")
  ))
(define-simple-node storage_class_specifier)
(define-simple-node string_literal)
(define-complex-node struct_specifier
  ((body: (field_declaration_list))
  (name: "")
  ))
(define-simple-node structured_binding_declarator)
(define-simple-node subscript_designator)
(define index: 'index:)
(define-complex-node subscript_expression
  ((argument:)
  (index: (initializer_list))
  ))
(define-complex-node switch_statement
  ((body: (compound_statement))
  (condition: (condition_clause))
  ))
(define-simple-node template_argument_list)
(define-complex-node template_declaration
  ((parameters: (template_parameter_list))
  ))
(define-complex-node template_function
  ((arguments: (template_argument_list))
  (name: (identifier))
  ))
(define-complex-node template_instantiation
  ((declarator:)
  (type: "")
  ))
(define-complex-node template_method
  ((arguments: (template_argument_list))
  (name: (field_identifier))
  ))
(define-simple-node template_parameter_list)
(define-complex-node template_template_parameter_declaration
  ((parameters: (template_parameter_list))
  ))
(define-complex-node template_type
  ((arguments: (template_argument_list))
  (name: (type_identifier))
  ))
(define-simple-node throw_specifier)
(define-simple-node throw_statement)
(define-simple-node trailing_return_type)
(define-simple-node translation_unit)
(define-complex-node try_statement
  ((body: (compound_statement))
  ))
(define-complex-node type_definition
  ((declarator:)
  (type:)
  ))
(define-complex-node type_descriptor
  ((declarator: "")
  (type:)
  ))
(define-simple-node type_parameter_declaration)
(define-simple-node type_qualifier)
(define-simple-node type_requirement)
(define-complex-node unary_expression
  ((argument: (preproc_defined))
  (operator:)
  ))
(define-complex-node union_specifier
  ((body: (field_declaration_list))
  (name: "")
  ))
(define-complex-node update_expression
  ((argument:)
  (operator:)
  ))
(define-simple-node user_defined_literal)
(define-simple-node using_declaration)
(define-simple-node variadic_declarator)
(define-complex-node variadic_parameter_declaration
  ((declarator:)
  (type:)
  ))
(define-simple-node variadic_type_parameter_declaration)
(define-simple-node virtual)
(define-simple-node virtual_specifier)
(define-complex-node while_statement
  ((body:)
  (condition: (condition_clause))
  ))
(define-simple-node auto)
(define-simple-node comment)
(define-simple-node escape_sequence)
(define-simple-node false)
(define-simple-node field_identifier)
(define-simple-node identifier)
(define-simple-node literal_suffix)
(define-simple-node ms_restrict_modifier)
(define-simple-node ms_signed_ptr_modifier)
(define-simple-node ms_unsigned_ptr_modifier)
(define-simple-node namespace_identifier)
(define-simple-node null)
(define-simple-node nullptr)
(define-simple-node number_literal)
(define-simple-node preproc_arg)
(define-simple-node preproc_directive)
(define-simple-node primitive_type)
(define-simple-node raw_string_content)
(define-simple-node raw_string_delimiter)
(define-simple-node statement_identifier)
(define-simple-node system_lib_string)
(define-simple-node this)
(define-simple-node true)
(define-simple-node type_identifier)
